
Use of perf
===============================================================
  cd $WK ; cp /var/tmp/ma0/DEFS/metabuilder.def .
  Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # Show system call overhead,as a summary.
  strace -c Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # Show page faults, data and instruction cache misses use:
  perf stat -d Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # perf stat to run the same test workload multiple times and get for each count, the standard deviation from the mean.
  perf stat -r 5 -d Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # For more detail and higher level overview, compile debug, -g means record stack traces
  perf record -g Base/bin/gcc-5.3.0/debug/perf_job_gen ./metabuilder.def
  perf report --sort comm,dso  # high level overview
  
  # for a graphical display, you can use flame graphs. This *ONLY* works properly with debug builds
  # and you must use -g (collect stack traces)
  # assume you have down loaded Flamegraph, git clone https://github.com/brendangregg/FlameGraph
  # The wider the graph the more time is spent.
  perf record -g Base/bin/gcc-5.3.0/debug/perf_job_gen ./metabuilder.def
  perf script | $HOME/FlameGraph/stackcollapse-perf.pl > out.perf-folded
  cat out.perf-folded | $HOME/FlameGraph/flamegraph.pl > my_perf.svg
  display my_perf.svg
  

strace
===========================================================================

# strace with table of system calls and percentages ******
cd $WK ; cp /var/tmp/ma0/DEFS/metabuilder.def .
strace -c Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
