
The metabuilder.def below needs preparation for perf test below: 
o/ ecflow_client --port 5062 --host ecflow-metab --get > metabuilder.def
o/ Edit metabuilder.def and replace 
      edit ECF_HOME '/home/ma/deploy/servers/ecflow-metab.5062/metabuilder/...'
   with
      edit ECF_HOME '/var/tmp/ma0/workspace/metabuilder/...'
o/ Edit metabuilder.def and replace:
      edit REMOTE_HOST 'ecflow-metab' | edit WSHOST 'ecflow-metab'
   with 
      edit REMOTE_HOST 'eurydice' | edit WSHOST 'eurydice'
o/ cd metabuilder workspace edit <package.py> remove code 
     if user != deploy ....
     as this stop the generation of scripts when user is not deploy. (to allow localhost checking)
   and regenerate
        ./generate.py -s codes_ui
        ./generate.py -s cgal
        ./generate.py -s boost
        ./generate.py -s metview
   This generate the scripts

Use of perf:  http://www.brendangregg.com/perf.html
===============================================================
  cd $WK ; cp /var/tmp/ma0/DEFS/metabuilder.def .
  time Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  time Base/bin/gcc-7.3.0/release/perf_job_gen ./metabuilder.def
  
  # Show system call overhead,as a summary.
  strace -c Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # Show page faults, data and instruction cache misses use:
  perf stat -d Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # perf stat to run the same test workload multiple times and get for each count, the standard deviation from the mean.
  perf stat -r 10 -d Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
  
  # For more detail and higher level overview, compile debug, -g means record stack traces
  perf record -g Base/bin/gcc-5.3.0/debug/perf_job_gen ./metabuilder.def
  perf report --sort comm,dso  # high level overview
  
  # for a graphical display, you can use flame graphs. This *ONLY* works properly with debug builds
  # and you must use -g (collect stack traces)
  # assume you have down loaded Flamegraph, git clone https://github.com/brendangregg/FlameGraph
  # The wider the graph the more time is spent.
  perf record -g Base/bin/gcc-5.3.0/debug/perf_job_gen ./metabuilder.def
  perf script | $HOME/FlameGraph/stackcollapse-perf.pl > out.perf-folded
  cat out.perf-folded | $HOME/FlameGraph/flamegraph.pl > my_perf.svg
  display my_perf.svg
  
Using valgrind
==========================================================================
valgrind --tool=cachegrind Base/bin/gcc-5.3.0/debug/perf_job_gen ./metabuilder.def
kcachegrind cachegrind.out.18473

test job creation
==========================================================================
 - Note writing to scratch can be slow, this can be overriden by user specfiying
 - thier own directory:
 
export PYTHONPATH=/var/tmp/ma0/workspace/ecflow/Pyext/ecflow
cat > tmp.py << EOF
import shutil
from ecflow import *

defs = Defs("metabuilder.def")

job_ctrl = JobCreationCtrl()
job_ctrl.set_dir_for_job_creation("/var/tmp/ma0/tmp/ecflow")  # generate jobs file under this directory
#job_ctrl.set_verbose(True)
defs.check_job_creation(job_ctrl)
print(job_ctrl.get_error_msg())

#print("removing job generation directory tree " + job_ctrl.get_dir_for_job_creation())
#shutil.rmtree(job_ctrl.get_dir_for_job_creation())     
EOF

strace -c python tmp.py


strace
===========================================================================

# strace with table of system calls and percentages ******
cd $WK ; cp /var/tmp/ma0/DEFS/metabuilder.def .
strace -c Base/bin/gcc-5.3.0/release/perf_job_gen ./metabuilder.def
