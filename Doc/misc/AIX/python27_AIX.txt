Python 2.5        
=========================================================================== 
v11.1 ecflow: Builds and all test run in debug & release

      boost-python:
         bjam problems.
            cd $BOOST_ROOT/libs/python/example
            bjam --toolset=vacpp test -d2  
         
            running test examples manually are ok.
         
 Python 2.7:
 ===================================================================================
Both v11.1 and v12_beta fail with Python 2.7 and boost 1.45 
   
   v12:  bjam actually hangs, but running manually still produces a core dump
   v11.1 same issue
   
   Configuration:
      - v12 beta
      - boost 1.47
      - python 2.7.2
      - AIX 5.3, power 6
 
   The steps to reproduce are:
   
   o Update site-config.jam with
      using python : 2.7 ;
      
   o cd $BOOST_ROOT/libs/python/example
   
   o run 
      $BOOST_ROOT/bjam --toolset=vacpp -d2
      
      This will build boost python library and the test
     
   o run 
      $BOOST_ROOT/bjam --toolset=vacpp test1 -d2
      
      This may hang. so kill it.  
      It it does try:
      
      $BOOST_ROOT/bjam --toolset=vacpp test1 -d2 -n
      
   o now run manually
     Explicitly set LIBPATH,PYTHONPATH
      python test_getting_started1.py
     will produce a core dump.
   
boost 1.47
-----------
   ************************************************************
   However v12 beta does work with boost 1.47, and python 2.7
   bjam hangs, but when the tests are run manually they all pass.
   *************************************************************
    
   
Totalview
===================================================================================
 program = python ,  core file
 
boost::python::incref<_object>,                                                   
boost::python::api::object::object,                                               
boost::python::api::slice_nil::slice_nil,                                         
__init__0,                                                                        
...2femos_5fesuite_2femos_5fdata_2fsms_2fecflow_5f2_5f0_5f22_2fPyext_2fsrc_2fBoostPythonUtil_2ecpp, FP=fffffffffff3d00
     .initialize_one_library__Fi,                                                      
     .initialize_libs__FPii,                                                           
     .load_libs__FPcPFv_iT1,                                                           
     .loadAndInit,                                                                     
     .dlopen,                                                                          
     ._PyImport_GetDynLoadFunc,                                                        
     ._PyImport_LoadDynamicModule,                                                     
     .initimp,                                                                        
     .initimp,                                                                         
     .initimp,                                                                        
     .initimp,                                                                         
     .PyImport_ImportModuleLevel,                                                     
     .fgets,                                                                           

------------------------------------------------------------

Total view shows that p(i.e Py_None) is NULL/0
------------------------------------------------------------

template <class T>
 inline T* incref(T* p)
 {
     Py_INCREF(python::upcast<PyObject>(p));
     return p;
 }

------------------------------------------------------------

inline object::object()
     : object_base(python::incref(Py_None))
 {}

------------------------------------------------------------
#ifndef SLICE_NIL_DWA2002620_HPP
 # define SLICE_NIL_DWA2002620_HPP
 
 # include <boost/python/detail/prefix.hpp>
 # include <boost/python/object_core.hpp>
 
 namespace boost { namespace python { namespace api {
 
 class slice_nil : public object
 {
  public:
     slice_nil() : object() {}
 };
 
 # ifndef _ // Watch out for GNU gettext users, who #define _(x)
 static const slice_nil _ = slice_nil();
 # endif    
   
   
dbx Core dump details:
==============================================================================
It appears that when loading the boost python extension, 
we get the following crash. 
It appears as if the value of 'p' is 0, hence the crash ?

#dbx /usr/local/apps/python/2.7.2-01/bin/python ./core

Segmentation fault in numeric.:python::incref<_object>(_object*) at line 16 in file "../boost/boost_1_45_0/boost/python/refcount.hpp" ($t1)
   16       Py_INCREF(python::upcast<PyObject>(p));

numeric.:python::incref<_object>(_object*)(0x0), line 16 in "refcount.hpp"
numeric.object()(0x9001000a0691560), line 504 in "object_core.hpp"
numeric.slice_nil()(0x9001000a0691560), line 16 in "slice_nil.hpp"
iterator.__init__0()(), line 25 in "iterator.cpp"
__sinit80000000_x_2fs1a_5fgpfs_2fs1a_5fod_2ffilesets_2femos_5fesuite_2femos_5fdata_2fsms_2fboost_2fboost_5f1_5f45_5f0_2flibs_2fpython_2fsrc_2fobject_2fiterator_2ecpp()(), line 20 in "slice_nil.hpp"
dbx: fatal error: nesting depth limit (25) exceeded.
   
   
   
   
   
Google search:
==========================================================================
Hi,

I have just successfully compiled Python 2.7a2 on AIX6.1, using the
IBM XL compiler (no gcc). I am documenting this here in case somebody
needs it:

#######
First, I installed the following dependencies:

1. readline-6.1;
2. tcl8.4.19/unix/
3. tk8.4.19/unix/
4. zlib-1.2.3

All of these compiled without a problem using

  ./configure && make && make install

#######
Second, the Python installation procedure. Here is the patch, see
below for comments:

http://pastebin.com/f1569d184

1. cd Python-2.7a2

2. cp Modules/Setup.dist Modules/Setup

3. vi Modules/Setup
   - Edit the path flags to the tcl and tk libraries (see the below
patch for an example)
   - Add the following flags: -ltk8.4 -ltcl8.4 -lld -lX11

4. Apply the below patch to "configure". This adds AIX6 support.

5. vi Modules/ld_so_aix: Set the following CCOPT variable
     CCOPT="$CCOPT -Wl,-bM:SRE -Wl,-T512 -Wl,-H512 -Wl,-brtl -Wl,-
bnortllib -lm -lbsd -o $objfile"
   Note that the alternate CCOPT variable that is mentioned in the
comments of that file does NOT work, so just use this instead.

6. ./configure && make && make install

Done. Caveats: The following modules did not work:

   _bsddb _ctypes bz2 gdbm.

However, since we do not need them I did not attempt to debug them.


======================================================================================

I have a crash when importing my boost python
extension. With the following configuration. 
   - python 2.7 
   - boost 1.45
   - vacpp 11.1
   - AIX 5.3
The problem can be reproduced with boost python examples as well. 

Currently I have a working solution using python 2.54.

This is what the core dump shows:

boost::python::incref<_object>,                                                   
boost::python::api::object::object,                                               
boost::python::api::slice_nil::slice_nil,                                         
__init__0,                                                                        
...2femos_5fesuite_2femos_5fdata_2fsms_2fecflow_5f2_5f0_5f22_2fPyext_2fsrc_2fBoostPythonUtil_2ecpp, FP=fffffffffff3d00
     .initialize_one_library__Fi,                                                      
     .initialize_libs__FPii,                                                           
     .load_libs__FPcPFv_iT1,                                                           
     .loadAndInit,                                                                     
     .dlopen,                                                                          
     ._PyImport_GetDynLoadFunc,                                                        
     ._PyImport_LoadDynamicModule,                                                     
     .initimp,                                                                        
     .initimp,                                                                         
     .initimp,                                                                        
     .initimp,                                                                         
     .PyImport_ImportModuleLevel,                                                     
     .fgets,        

Here is the code associated with the stack dump above;

----------------------------------------------------------------
template <class T>
 inline T* incref(T* p)
 {
     Py_INCREF(python::upcast<PyObject>(p));
     return p;
 }
------------------------------------------------------------
inline object::object()
     : object_base(python::incref(Py_None))
 {}

------------------------------------------------------------
#ifndef SLICE_NIL_DWA2002620_HPP
 # define SLICE_NIL_DWA2002620_HPP
 
 # include <boost/python/detail/prefix.hpp>
 # include <boost/python/object_core.hpp>
 
 namespace boost { namespace python { namespace api {
 
 class slice_nil : public object
 {
  public:
     slice_nil() : object() {}
 };
 
 # ifndef _ // Watch out for GNU gettext users, who #define _(x)
 static const slice_nil _ = slice_nil();
 # endif    

===========================================

Total view shows that p(i.e Py_None) is NULL/0

It appears that when the static slice_nil is created at
module import time. We end up with Py_None being
 NULL/0.
Could this be a problem with the way the python 2.7 was
installed/set up.

Any help would be greatly appreciated.


   Best regards,
Ta,
    Avi

