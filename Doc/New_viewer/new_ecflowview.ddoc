My dislikes of current viewer
/////////1/////////2/////////3/////////4/////////5/////////6/////////
 
o Does not support multiple selection.

o Text editor:
  ecflowView has an editor which allows the scripts to be modified.
  This edit is extremely limited,
  (i.e. no copy/paste/undo which makes it difficult to use)
  Does not show line numbers, & you have to use another editor. 
  i.e less
  
o ecflowview has background menu, which supports fold/expand type 
  functionality. This was not immediately obvious.
  We need a more intuitive method.
  
o Variables play a large part in ecFlowView.
  Since there can be a huge number, you find yourself struggling 
  to find the right variable.
  Need a better mechanism for search/ edit.
    o Add ability to sort as a flat list
    o sort with the hierarchy.
    
o Toolbar icons, should be selection sensitive.
  The toolbar icon, in fact any icon should provide tooltip's
  
o Busy icon. Often the UI will hang, (since it is single threaded).
  We need display a busy icon for blocking functionality.
  
o Tootip: 
  Currently the RMB menu shows the TYPE of the node selected.
  (i.e server,suite,family, task,alias).
  This takes valuable real estate, & could be replaced with a 
  tool tip.
  
o No logging.
  ***THIS MAKES IT A NIGHTMARE TO REPLICATE CUSTOMER REPORTED ISSUES**


Requirements
/////////1/////////2/////////3/////////4/////////5/////////6/////////

o There are 3 main clients each have a different view point 
  /requirements
   - operators
   - research
   - operations

TEST
----
 o ***this must support logging OF *all* INTERACTIVE  COMMAND ****
 o Ideally also support replay capability.
 
 o Must supply a regression test. To verify functionality.
   Actions on the gui, should be re-playable and stored in a log file 
   where possible.
   This allow large parts of the functionality to be used in 
   regression tests and allows debug of customer reported problems.
   
   Need core abstraction like, Selection, View/Window, active view, 
   command. etc
      open view (node tree | spreadsheet)
      open_server oetzi:4141
      select /suite/task
      suspend
      resume
      close view
      
      This could be exposed as a python API. This has added advantage, 
      that we can then verify that server has been modified.
      Note: with boost python, it is very easy to add a python 
      interface for a  C++ hierarchy.
      
   Or something similar. 
   (from what I recall QT did provide some support here)
   
   Note:Currently we already have viewer DR's from NCEP, 
   which are not reproduce able, if we had a logging capability 
   these issues would be easier to debug.
   
LOOK and FEEL
-------------
o Need to choose Desktop GUI to follow: rather than inventing 
  our own:
      - OS-X
      - Microsoft 
      - GNOME
      - Java Look & Feel.
   
o Stop hanging: Ideally the GUI needs to be multi-threaded.
   - The main event loop needs one thread.
   - All client/server interaction, needs a separate thread.
   - For quad core machines, the log file viewer could be on 
     another thread.
   
o Text Interface(network down)
  - When the network is done(rare but has happened). 
    We remotely login into the machines where the server is running.
    We still need to visualise the state.
    SMS currently provides a text view of the hierarchy.
    
o Web Interface:
  Some member states require a simpler way to monitor their suites. 
  (read only view)
  This will need to set limits. (i.e for output display)
  Does ecCharts provide any tree widgets/ spreadsheet views.
  See: http://philogb.github.io/jit/demos.html
 
o Display of node tree:
   - Tree view
   - Spreadsheet view 
   
   Text editor based views:
   - manual(read only)
   - script (read/write)
   - Job file(read only)
   - Job output: Need timer to show running output. (read only)
     Integration with logserver
   - Message(read only)
   - Server log(read only)
   - Why(read only)
   - Info on selected node. (read only)
   - White list file,
   - Hosts file.
   
   Others:
   - Time line view
   - Trigger view  (Display of trigger dependencies)
   - Variables (custom spreadsheet)
   
o Support multiple selection

o - ECFLOW-81 ecFlow color settings 
   - Allow user to set a colour for each server.
   - The color of a meter bar. This should also be an option in the 
     ecflow_client interface for manipulating meters dynamically,
     e.g. changing the bar color when it reaches a certain value

o Variables:
  Consider showing this in a editable spreadsheet.
  This should allow sorting, and editing in place, to allow multiple
  variables to be edited.
  Must distinguish between generated variables & user variables.
  (Colour ?)
  and overridden variables(i.e variable of the same name that occurs 
  lower down the hierarchy)
  
o Inclusion of a python shell or embedded python interpreter
   For advanced usage.
   This could be part of the collector view.( This allows client 
   to server commands to be applied based on the selection)
   Note: the new ecflowview need only expose the node selection as 
   a python api (i.e list of paths). 
   This will allow custom queries, with little effort.
   
o Should have the ability to show the running server log. 
   ( equivalent of tail -f log_file)
   This is very very common use case.
   It will also aid the development of the new GUI.
  
o Text editor: ( read only and editable)
   Used to show and edit the script file. And show output file.
   Hence it must be able to deal with extremely large file's
   Need full text editing capabilities.i.e. 
   cut/copy/paste/delete/undo/redo, etc
   i.e popup menu, show line numbers, go to line, search/replace, 
   etc This should include all the normal shortcuts.
  
  ** Whenever we have errors, in the job file, the errors refer 
  ** to a line number.
  ** The ecflowview text editor however does not show line numbers, 
  ** hence you end up having to use less
  
  ** Show Output, should be configurable, such when the output 
  ** is opened, in the text editor we search the content for
  ** a given string/(set of strings) and select the line.
  ** (i.e in prodgen case, for ERR)

o Toolbar icon: 
      These could split into *tabs* of related functionality ?
      process tab: Kill, status, zombies, execute
      Run tab:     requeue, requeue if aborted, 
                   remove time/date dependencies
      Trace Tab:   Why command, trigger dependencies view.
      Monitor tab: Show Output, show script, show manual
      Edit tab:    Cancel/delete, edit script, alter command, plug
      Server/Admin Tab: Shutdown, Halt, terminate, 
                   Zombies, checkpoint, recover from check point.  
                   (These are selection independent)
      
o Ease of use: When the user selects a aborted task.
  The most obvious next choice, would be for the user to show the output.
  Hence the Tool bar Monitor Tab, should be selected, 
  allowing user to select "show output"
 
  
o Tooltips. Much better use of tool tips
   - Node: 
     Server: Show real server name, since alias can be used, 
             also show port number
     Nodes:  The tool tip will show: 
             Suite:  Node Type & node state
             Family: Node Type & node state
             Task:   Node Type & node state, run time
     Flag icon: Have a more descriptive tool tips, about 
                meaning of the flag icons.
       
   - Toolbar icon: If toolbar icon is greyed out, could show what
                   selection is required.
 
o Configurable short cuts for common commands. i.e
       <CTRL-S> suspend
       <CTRL-R> resume
       
o Should allow display on multiple consoles. 
   Especially if we support multiple views.
 
o Auto-store window positions & re-invoke should restore same 
   window as when exited.
 
o Administrator Mode:
   The mode allow additional functionality:
      o Allow the user to view/edit 'white list file'
        The white list file controls which users have 
        read/write access to the server.
      o Allow user to view/edit the .ecfhostfile
        The ecfhostfile lists the back up servers, should the 
        main server go down.
      o Show server load.
        Currently there is  command 
          ecflow_client --server_load=/path/to/logfile.
        Which traverse the log file and show's the server load.
        This functionality could be pulled into the view.
      o Same as current functionality:
        Allow begin,cancel/delete, plug, etc

HELP
-----
o Extensive use of help:.
   Could use QT embedded HTML viewer.
   This could point to relevant section in the user/reference manual.
   
   ecflow provides a variable ECF_URL_CMD which allows user editable 
   html address path. This could also be sent to QT html view.
    
   
Others
/////////1/////////2/////////3/////////4/////////5/////////6/////////
 
o Spreadsheet are very useful when display very large amount of data

o Consider adding a  spreadsheet editor as an alternative view.
  This will allow very powerful query and search facility.
  If the new ecflow view use hierarchical PAC design pattern,
  these kinds of views could be added afterwards.
  
  The spread sheet could support flat and hierarchical organisation 
  of the node tree. 
  ** The flat view allows us to display the node tree 
  ** independent of the hierarchy. i.e we could bubble up the
  ** aborted tasks, and display together.
  
  The attributes of the node tree, i.e repeat, time ,event,labels
  would be added as columns in the spreadsheet. 
  Spreadsheet Allow us to sort based, on these columns. 
  It would allow allow direct edit, of event/meter/labels/etc
  hence no need for custom dialogs.
  
 o Allow menus, dialogs, etc to be internationalised ?
   or just stick with English ?
 




Planning
========

 

o Requirements
  Monitoring
  INTERACTION
  ADVANCED
  - scriptable
  - Tree View, prototype, ( QT tableview)
  - Spreadheet view prototype, (flat. hierarchical)
  - Working prototype
    - shown to, project sponsors, (operators,ops, research)
  - multithreading (QT or Others)
    display busy cursors for slow server response.

o Overview of ecflow
  - Architectural patterns(Layering)
  - Class Hierarchy and attributes
  - Client Interface
  - Unit Tests
  - Performance Tests
  - memory leaks tests
  - Client server tests
  - Client interface tests

  - Python interface
  - Auto-generate scripts, given any suite definition
 



