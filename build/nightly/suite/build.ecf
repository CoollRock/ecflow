%include <head.h>
# line just after head.h ------------------------------------------
%manual
# =============================================================================
# Change to work space directory: 
# We do ***not** want to hard wire version in the definition
# This will allow us to change version without having to modify the definition
# ==============================================================================
%end
release=
major=
minor=
if [[ "%LOCAL_HOST:%" != ""  ]] ; then
   export WK=%WK%
   cd $WK
else
   cd %ROOT_WK:%/ecflow
fi

# ================================================================================
# Determine the release,major,minor numbers for this version 
# ================================================================================
release=$(cat VERSION.cmake | grep 'set( ECFLOW_RELEASE' | awk '{print $3}'| sed 's/["]//g')
major=$(cat VERSION.cmake   | grep 'set( ECFLOW_MAJOR'   | awk '{print $3}'| sed 's/["]//g')
minor=$(cat VERSION.cmake   | grep 'set( ECFLOW_MINOR'   | awk '{print $3}'| sed 's/["]//g')
ecflow_version=$release.$major.$minor

# =================================================================================
# Environment used by ecflow
# Hack for ecflow extension:
#
# In order to embed the path to boost python in ecflow extension
# we must build with ECFLOW_INSTALL_DIR & ECFLOW_PYTHON_INSTALL_DIR set
#===================================================================================
export ECFLOW_INSTALL_DIR=/usr/local/apps/ecflow/$release.$major.$minor

# ===================================================================================
# for cray, can have 3 different compiler, and multiple versions
# *HOWEVER* we only install using the GNU compiler.
# Note: we would only use:
#       export ECFLOW_INSTALL_DIR=/usr/local/apps/ecflow/$release.$major.$minor/$PE_ENV/$COMPILER_VERSION
# If we had libraries to install.
# Hence for ecflow we will stick with: /usr/local/apps/ecflow/<version>
# ===================================================================================
#if [[ %ARCH% = cray ]] ; then
#   if [[ "$PE_ENV" = CRAY ]] ; then
#      export COMPILER_VERSION=$(echo $CRAY_CC_VERSION | sed 's/\.//' | cut -c1-2)
#   fi
#   if [[ "$PE_ENV" = INTEL ]] ; then
#      export COMPILER_VERSION=$(icc -dumpversion | sed 's/\.//' | cut -c1-3)
#   fi
#   if [[ "$PE_ENV" = GNU ]] ; then
#      export COMPILER_VERSION=$(gcc -dumpversion | sed 's/\.//' | cut -c1-2)
#   fi
#   export ECFLOW_INSTALL_DIR=/usr/local/apps/ecflow/$release.$major.$minor/$PE_ENV/$COMPILER_VERSION
#fi

export ECFLOW_PYTHON_INSTALL_DIR=$ECFLOW_INSTALL_DIR/lib/python%PYTHON_VERSION%/site-packages/ecflow 


# bjam use ARCH environment to determine if the ecflowview should be built
if [[ %BUILD_ECFLOWVIEW% = "true" ]] ; then
   export ARCH=linux
fi


# for intel compiler
if [[ %ARCH% = linux64intel ]] ; then
   export PATH=/usr/local/apps/intel/composer_xe_2013.3.163/bin:$PATH
   sh -x iccvars.sh intel64
fi


echo $PATH
if [[ %SET_TO_TEST_SCRIPT% = true ]] ; then
   echo "Test only"
else
   if [[ %BUILD_TYPE:boost% = cmake ]] ; then
   
      # CMAKE ===========================================================
      pwd
      mkdir -p ecbuild/%MODE% 
      cd ecbuild/%MODE%
      
      if [[ %ECF_TRYNO% -eq 1 ]] ; then
      
         cmake_build_type=
         if [[ %MODE% = debug ]] ; then
            cmake_build_type=Debug
         else
            cmake_build_type=Release
         fi
         
         if [[ %TOOLSET% = intel ]]; then
            /usr/local/apps/cmake/current/bin/cmake ../../  \
            -DCMAKE_BUILD_TYPE=$cmake_build_type \
            -DCMAKE_INSTALL_PREFIX=/usr/local/apps/ecflow/$ecflow_version \
            -DCMAKE_C_COMPILER=icc  -DCMAKE_CXX_COMPILER=icpc 
         elif [[ %TOOLSET% = clang ]]; then
            /usr/local/apps/cmake/current/bin/cmake ../../  \
            -DCMAKE_BUILD_TYPE=$cmake_build_type \
            -DCMAKE_INSTALL_PREFIX=/usr/local/apps/ecflow/$ecflow_version \
            -DCMAKE_C_COMPILER=clang  -DCMAKE_CXX_COMPILER=clang++       
         elif [[ %TOOLSET% = vacpp ]]; then
            # use xlC_r as that will automatically add -lpthreads, which is used some of boost libs
            /usr/local/apps/cmake/current/bin/cmake ../../  \
            -DCMAKE_BUILD_TYPE=$cmake_build_type \
            -DCMAKE_INSTALL_PREFIX=/usr/local/apps/ecflow/$ecflow_version \
            -DCMAKE_C_COMPILER=xlC  -DCMAKE_CXX_COMPILER=xlC_r \ 
            -DPYTHON_LIBRARIES=/usr/local/apps/python/2.7.2-01/lib/python2.7/config/
         else
            /usr/local/apps/cmake/current/bin/cmake ../../  \
            -DCMAKE_BUILD_TYPE=$cmake_build_type \
            -DCMAKE_INSTALL_PREFIX=/usr/local/apps/ecflow/$ecflow_version
         fi
      fi
      
      if [[ %TOOLSET% = vacpp ]]; then
         # Hack required for python extension
         export LDSHARED="xlC_r -G -Wl,-bI:/usr/local/apps/python/2.7.2-01/lib/python2.7/config/python.exp"
      fi

      if [[ %ECF_TRYNO% -eq 1 ]] ; then
         make -j%NO_OF_CORES%    
      else
         make -j%NO_OF_CORES% VERBOSE=1             
      fi
      
   else
         
      # BOOST Build =====================================================
   
      # TEST should be set to -n if defined
      $BOOST_ROOT/bjam %CUSTOM_BJAM_ARGS:% variant=%MODE% -j%NO_OF_CORES% %TEST:% -d2
   fi
fi
 
#==================================================================================

%include <tail.h>
