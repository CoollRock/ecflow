%include <head.h>

#===============================================================
# defines variable WK 
#===============================================================
%include <export_WK.h>
cd $WK

#===============================================================
# run the regression tests: Don't re-run test if already passed
# If test exe is rebuilt, then re-run the test
#===============================================================

# the variable COMPILER_TEST_PATH will embed $mode, mode can be one of [ debug | release | profile ]
mode=%MODE%

echo "*****************************************"
echo "Testing: variant=$mode compiler=%TOOLSET%"
echo "*****************************************"

ecflow_client --label=progress core/nodeattr/nodeAParser   --host=%ECF_NODE% --port=%ECF_PORT%  


run_test()
{
   # Run the test, if the test passes don't rerun again
   # This is done by touching a file named after the test and mode(debug or release)
   # This makes the test pass file unique.
   # if test executable is newer then the test pass file then rerun test
   #
   # $1 = Project directory
   # $2 = test name executable

# The following lines are required for aborting a test, function ERROR must be defined
trap '{ echo "Error in function"; ERROR; }' 0 1 2 3 4 5 6 7 8 10 12 13 15
set -e # stop shell, on error
set -x # echo script lines as they are executed

%ecfmicro ^

   #
   # we use TOOLSET since its possible to get different compilers on the same platform
   # If ever use different versions of the same compiler may need COMPILER_VERSION
   #
   if [[ ^ARCH^ = ibm_power* || ^ARCH^ = rs6000 ]] ; then
   
      exe_time=`/opt/freeware/bin/date +%s -r $1/bin/^COMPILER_TEST_PATH^/$2`
      passed_file_time=0
      if test -r $1/bin/$2_^TOOLSET^_^MODE^_passed
      then
         passed_file_time=`/opt/freeware/bin/date +%s -r $1/bin/$2_^TOOLSET^_^MODE^_passed`
      fi
   else
   
      exe_time=`date +%s -r $1/bin/^COMPILER_TEST_PATH^/$2`
      passed_file_time=0
      if test -r $1/bin/$2_^TOOLSET^_^MODE^_passed
      then
         passed_file_time=`date +%s -r $1/bin/$2_^TOOLSET^_^MODE^_passed`
      fi
   fi

^ecfmicro %


   if test $exe_time -gt $passed_file_time
   then
      $1/bin/%COMPILER_TEST_PATH%/$2 --log_level=message
      if [ "$?" -eq 0 ] ; then
         touch $1/bin/$2_%TOOLSET%_%MODE%_passed
      fi
   fi
   
   # required for aborting form errors
   set -e; trap 0; return 0 ##### reset trap
}


if [[ %SET_TO_TEST_SCRIPT% = true ]] ; then
   echo "Test only"
else
   #============================ core ===================================
   run_test ACore coretest
   
   
   #============================ node attr ===================================
   run_test ANattr nodeattrtest
   
   
   #============================ node  ========================================
   run_test ANode nodetest
   
   
   #============================ parser  ========================================
   run_test AParser tparser
   
   
   #============================ base  ========================================
   ecflow_client --meter=progress 20             --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Base           --host=%ECF_NODE% --port=%ECF_PORT%
   
   run_test Base basetest
   
   
   #============================ simulator  ========================================
   ecflow_client --meter=progress 25             --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Simulator      --host=%ECF_NODE% --port=%ECF_PORT%  
   
   run_test CSim testsimulator
   
   
   #============================ Server  ========================================
   ecflow_client --meter=progress 35             --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Server         --host=%ECF_NODE% --port=%ECF_PORT%
   
   run_test Server tserver
   
   
   #============================ Parser a big file  ========================================
   ecflow_client --meter=progress 40             --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress ParseMega      --host=%ECF_NODE% --port=%ECF_PORT%  
   
   run_test AParser tsingle
   
   
   #============================ Client ========================================
   ecflow_client --meter=progress 45             --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Client         --host=%ECF_NODE% --port=%ECF_PORT% 
   
   # HACK for IBM which sets ECF_RID, unset before running client server tests
   # Not defined for other platforms
   if [[ %ARCH% = ibm_power* || %ARCH% = rs6000 ]] ; then
      unset ECF_RID
   fi
   
   run_test Client tclient
   
   
   #============================ Test ========================================
   ecflow_client --meter=progress 60     --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Test   --host=%ECF_NODE% --port=%ECF_PORT%  
   
   if [[ %ARCH% = rs6000 || %ARCH% = opensuse113 || %ARCH% = opensuse103 || %ARCH% = redhat ]] ; then
      # On ECGATE/opensuse113 port 3141 is already used ???
      # linux64 and linux64intel, run at the same time, hence use ECF_PORT=3142 for linux64intel
      export ECF_PORT=3142
   fi
   
   run_test Test server-test
   
   
   #============================ Test zombies ========================================
   ecflow_client --meter=progress 80        --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Zombies   --host=%ECF_NODE% --port=%ECF_PORT% 
   
   run_test Test test-zombies
   
   
   #============================ Python ========================================
   # placed last since bjam invocation appears to hang occasionally on HPUX/ecgate
   
   ecflow_client --meter=progress 90       --host=%ECF_NODE% --port=%ECF_PORT%  
   ecflow_client --label=progress Python   --host=%ECF_NODE% --port=%ECF_PORT%  
   
   #rm -rf Pyext/bin/*.test   
   cd Pyext
   
   # make sure path to the interpreter is accessible.
   # This can be hard coded in site-config.jam i.e via using python
   # Or amend the path here
   
   if [[ %ARCH% = linux64 ]] ; then
      #
      # NOTE: /usr/local/bin provides path to 2.7 PYTHON interpreter
      #       *MAKE* sure it becomes *BEFORE* /usr/bin as that points to python 2.6
      #        This is what 'using python' will pick up and add to the include path
      #
      export PATH=/usr/local/bin:$PATH 
      
   elif [[ %ARCH% = opensuse113  ]] ; then
   
      export PATH=/usr/local/bin:$PATH
      
   elif [[ %ARCH% = redhat  ]] ; then
   
      export PATH=/usr/local/apps:$PATH
      
   elif [[ %ARCH% = opensuse103  ]] ; then
   
      #
      # NOTE: /usr/local/apps/python/2.7.2-01/bin/ provides path to PYTHON interpreter
      #       This is what 'using python' will pick up and add to the include path
      #
      export PATH=/usr/local/apps/python/2.7.2-01/bin/:/usr/local/bin:$PATH
      
   elif [[ %ARCH% = linux64intel  ]] ; then
   
      #
      # NOTE: /usr/local/apps/python/2.7.2-01/bin/ provides path to PYTHON interpreter
      #       This is what 'using python' will pick up and add to the include path
      #
      export PATH=/usr/local/apps/python/2.7.2-01/bin/:/usr/local/bin:$PATH
      export PATH=/usr/local/apps/intel/composer_xe_2013.3.163/bin:$PATH
      
      # ensure any variable exported will form part of this script.
      # Ignore errors in the script, re-enable afterwards.
      # If all else fails we only need LD_LIBRARY_PATH
      #   export LD_LIBRARY_PATH=/gpfs/usr/local/apps/intel/composer_xe_2013.3.163/composer_xe_2013.3.163/ipp/../compiler/lib/intel64:/gpfs/usr/local/apps/intel/composer_xe_2013.3.163/composer_xe_2013.3.163/ipp/lib/intel64:/opt/intel/mic/coi/host-linux-release/lib:/opt/intel/mic/myo/lib:/gpfs/usr/local/apps/intel/composer_xe_2013.3.163/composer_xe_2013.3.163/compiler/lib/intel64:/gpfs/usr/local/apps/intel/composer_xe_2013.3.163/composer_xe_2013.3.163/mkl/lib/intel64:/gpfs/usr/local/apps/intel/composer_xe_2013.3.163/composer_xe_2013.3.163/tbb/lib/intel64/gcc4.1
      # Needed so that we can find libimf.so
      set +eux
      . iccvars.sh intel64
      set -eux
   fi
   
   # On cray we need CUSTOM_BJAM_ARGS i.e for toolset=intel cxxflags=-fPIC otherwise, it will rebuild Pyext directory with default compiler
   # hence thses flags need to be same used in build.ecf
   $BOOST_ROOT/bjam %CUSTOM_BJAM_ARGS:% variant=$mode test-all
   
   cd ..
   
   
   #============================ Test GUI ========================================
   # commented out since ecflowview emits: " can't open display, exiting... "
   #if [[ -z DISPLAY ]]; then
   #    echo "DISPLAY variable is not defined, ecflowview is not tested..."
   #else
   #   run_test view test-view
   #fi
      
   # ========================= all test complete ==========================================
   ecflow_client --meter=progress 100        --host=%ECF_NODE% --port=%ECF_PORT% 
fi

%include <tail.h>
